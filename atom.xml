<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Himanshu Gilani]]></title>
  <link href="http://hgilani.github.com/atom.xml" rel="self"/>
  <link href="http://hgilani.github.com/"/>
  <updated>2012-09-26T19:35:27+02:00</updated>
  <id>http://hgilani.github.com/</id>
  <author>
    <name><![CDATA[Himanshu Gilani]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Bootstraping a Node.js App for Dev/Prod Environment]]></title>
    <link href="http://hgilani.github.com/blog/2012/09/26/bootstraping-a-node-dot-js-app-for-dev-slash-prod-environment/"/>
    <updated>2012-09-26T19:30:00+02:00</updated>
    <id>http://hgilani.github.com/blog/2012/09/26/bootstraping-a-node-dot-js-app-for-dev-slash-prod-environment</id>
    <content type="html"><![CDATA[<p>Setting up a web server in node is really simple. A <a href="http://nodeguide.com/beginner.html#a-hello-world-http-server">basic hello world http server</a> can be written in under 10 lines. However, if you want to write a production grade app then you are better of by using any framework that provides foundation and structure to your logic. When choosing frameworks there are no right or wrong answers. Important thing is to select a framework that is being actively developed, has community support and most of important of all you love the way it works.</p>

<h2>Bootstrap a Node.js App with Express Application</h2>

<p><a href="http://expressjs.com">Express</a> is a web application framework for Node.js. It is simple to use and can be configured to work with popular technologies. To understand how Express works you can follow the <a href="http://expressjs.com/guide.html">Getting Started</a> page on the express web site. This guide also explains <a href="http://expressjs.com/guide.html#executable">how to use the express global executable</a> for generating a skeleton web app.</p>

<p>Once you have generated a skeleton web application. You need to understand how to structure the skeleton app for the Dev/Prod parity as well as making few changes to the app for making your app modular.</p>

<h3>Dev/Prod parity</h3>

<p>You will notice following snippet in the skeleton app</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>app.configure('development', function(){
</span><span class='line'>  app.use(express.errorHandler());
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p>In the code <code>development</code> refers to the dev environment. Any dev specific setup that you want to do can be configured under this block. This snippet just configures a error handler for the dev environment. If you need to configure settings for any other environments like staging, production, etc then you can configure them the same way.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>app.configure('production', function(){
</span><span class='line'>
</span><span class='line'>  // production env. specific settings 
</span><span class='line'>
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<h3>process.env</h3>

<p>In your express skeleton you will notice that port on which your app listens is configured as following</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>process.env.PORT</span></code></pre></td></tr></table></div></figure>


<p>Now you may begin to think what is <code>process.env</code>. Node.js <a href="http://nodejs.org/api/process.html#process_process">documentation</a> defines the <code>process</code> as a global object that can be accessed from anywhere. And <code>process.env</code> is an object that contains the user environment.</p>

<p>If you were running in bash shell and you have configured a <code>PORT</code> environment variable with value <code>80</code> then inside the app <code>process.env.PORT</code> will have the value 80. In the same vein you can configure a NODE_ENV environment variable that indicates to express in which environment it is executing.</p>

<p>On the production host you can execute</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>export port=80
</span><span class='line'>export NODE_ENV=prodction</span></code></pre></td></tr></table></div></figure>


<p>And on the development host you can let express use its default settings of running on port 3000 and set NODE_ENV to &#8216;development&#8217;</p>

<h3>Simulating production environment during testing</h3>

<p>If you ever want to simulate production environment for testing then that is easy. This can be easily done without configuring NODE_ENV variable in your environment. Instead of starting your app using <code>node app.js</code> you can start it as following</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NODE_ENV=production node app.js</span></code></pre></td></tr></table></div></figure>


<p>This way NODE_ENV variable is only set for the current process execution and the value is not persisted in the environment settings.</p>

<h3>env.json</h3>

<p>Setting environment variables to configure different settings for different environment is nice but it does not scale well. What we need is persistent storage for the environment properties that can act as a gold standard and is simple and easy to use. Meet <strong>env.json</strong>, add a new file in the project root with the name <code>env.json</code>. You can structure this file in the following way add key/value properties with right settings per environment.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "development": {
</span><span class='line'>      "facebook_app_id": "facebook_dummy_dev_app_id",
</span><span class='line'>      "facebook_app_secret": "facebook_dummy_dev_app_secret",
</span><span class='line'>  }, 
</span><span class='line'>  "production": {
</span><span class='line'>      "facebook_app_id": "facebook_dummy_prod_app_id",
</span><span class='line'>      "facebook_app_secret": "facebook_dummy_prod_app_secret",
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<p>This snippet shows how to configure same settings for development and production environment. If you ever has a need to add a new environment, then you can simply extend this file and add another property block.</p>

<p>Working with <code>env.json</code> is easy. In node parsing is a json file is as simple as loading the file using <code>require</code> statement.</p>

<p>I like to abstract all the code that I can reuse as functions in <code>common.js</code> file. So start by creating <code>common.js</code> file. Following is the parsing logic for env.json in this file.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var env = require('env.json');
</span><span class='line'>
</span><span class='line'>exports.config = function() {
</span><span class='line'>  var node_env = process.env.NODE_ENV || 'development';
</span><span class='line'>  return env[node_env];
</span><span class='line'>};</span></code></pre></td></tr></table></div></figure>


<p>Once you have created the common.js file using it for reading environment specific properties is as simple as loading it in app.js and using an object property.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var common = require('./routes/common')
</span><span class='line'>var config = common.config();
</span><span class='line'>
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'>var facebook_app_id = config.facebook_app_id;
</span><span class='line'>// do something with facebook_app_id
</span></code></pre></td></tr></table></div></figure>


<h3>Structuring express application with Open/Closed principle</h3>

<p>After you have configured app.js correctly. You want to close it down from future modifications but you still need a way to extend it by adding new routes to the app. This is simple and easy to do. Read <a href="http://blog.pixelingene.com/2012/06/a-simple-organization-scheme-for-expressjs-apps/">A Simple Organization Scheme for Handling Routes in ExpressJS Apps</a> for understanding how to do this by establishing some conventions for your project.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing Memento]]></title>
    <link href="http://hgilani.github.com/blog/2012/09/17/introducing-memento/"/>
    <updated>2012-09-17T06:19:00+02:00</updated>
    <id>http://hgilani.github.com/blog/2012/09/17/introducing-memento</id>
    <content type="html"><![CDATA[<p>Here is a wonderful application that allows you to save any web page that you like. It is your personal space with all that you like on the web. Some space that you can access whenver you like. You can create an account at <a href="http://www.mementodb.com">www.mementodb.com</a></p>

<h2>What are mementos?</h2>

<p>Mementos are anything that you save using this application. You can think of a memento as a copy of the entire web page saved into your account for you to <strong>&#8220;use&#8221;</strong> later. When we say <strong>&#8220;use&#8221;</strong> we really mean you should be able to read, edit or print the mementos. For creating mementos we convert web pages that you want to collect into a text format that any one can edit without understanding the techonolgies of the web.</p>

<h2>Why Use Memento?</h2>

<p>Web is constantly changing, pages that you bookmark today may vanish tomorrow. But what if you found something on web that you want to keep as a personal memento. With Memento you can <strong>Save</strong>, <strong>Collect</strong> and <strong>Use</strong> your web.</p>

<h2>How it Works?</h2>

<p>Memento provides a bookmarklet that converts the web page you want to keep into Markdown and saves it to your account.</p>

<h2>Memento Features</h2>

<p>Memento is designed for usability and following are some of its features</p>

<ul>
<li>Simple and amazingly Fast.</li>
<li>Convert and Save any page as Memento.</li>
<li>Takes new Notes or edit your saved mementos.</li>
<li>Organize saved mementos using Tags.</li>
<li>Distraction free Reading environment.</li>
<li>Best Writing experience with Markdown.</li>
<li>Saved mementos are Printer friendly.</li>
</ul>


<h2>Memento Quicklook</h2>

<h3>List of mementos saved in your personal account</h3>

<p><img src="http://hgilani.github.com/images/hero-shot1.png" title="[title text [alt text]]" ></p>

<h3>Saving mementos using bookmarklet</h3>

<p><img src="http://hgilani.github.com/images/hero-shot2.png" title="[title text [alt text]]" ></p>

<h3>Saving mementos using bookmarklet (saved copy of page)</h3>

<p><img src="http://hgilani.github.com/images/hero-shot3.png" title="[title text [alt text]]" ></p>

<h2>Feedback, Ideas or Suggestions</h2>

<p>If you have any ideas, feedback, or suggestions for improving Memento then please email me at hgilani[at]gmail[dot]com</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NPM and package.json]]></title>
    <link href="http://hgilani.github.com/blog/2012/07/29/npm-and-package-dot-json/"/>
    <updated>2012-07-29T09:28:00+02:00</updated>
    <id>http://hgilani.github.com/blog/2012/07/29/npm-and-package-dot-json</id>
    <content type="html"><![CDATA[<p>NPM is a package manager for node. Working with NPM is really simple. It gets installed as part of the node.js installation. NPM packages can be installed locally for a project or globally for the entire system. Whenever you install packages these packages are fetched from the <a href="https://npmjs.org/">NPM registry</a>.</p>

<h2>Local Install</h2>

<p>If you want to install any node package then you can simply do</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install {package_name}</span></code></pre></td></tr></table></div></figure>


<p>This will install NPM package {package_name} in the current working directory. This is typically root of the project.</p>

<h2>Global Install</h2>

<p>At times you may want to have some packages installed globally in the system. Gloabl packages are not project specific. Any package can be installed globaly if you add the <code>-g</code> switch</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo npm install -g {package_name} </span></code></pre></td></tr></table></div></figure>


<p>Notice the use of <code>sudo</code> in the above command. This is because the package will be available globally in your system and you need admin privileges for making changes that affect the entire system.</p>

<h2>Local vs Global Install</h2>

<p>When working with NPM packages you want to think in terms of local vs global packages. Local packages are project specific and need to be installed in project root folder. This way 2 different projects can use different version of the same package.</p>

<h3>So when will you need global packages?</h3>

<p>Global packages are useful when you need something for maintaining your project e.g. packages needed for building/testing your project. These packages typically do not get installed in the production environment.</p>

<p>For a detailed description of different options available for npm command refer to <a href="http://blog.nodejitsu.com/npm-cheatsheet">npm cheatsheet</a></p>

<h2>package.json</h2>

<p>This is all good. Now we need a way to maintain dependencies for the project. This is typically done by creating a package.json at the root of the project and project dependencies in dependencies section. In addition to the project dependencies this file can contain project specific metadata like project name, description, version, author, script to execute for running/testing the application, etc.</p>

<p>Following is a sample package.json file</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;memento&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;description&quot;</span><span class="p">:</span> <span class="s2">&quot;Memento: Discover and Save your Web&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;subdomain&quot;</span><span class="p">:</span> <span class="s2">&quot;memento&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;domains&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="s2">&quot;mementodb.com&quot;</span>
</span><span class='line'>   <span class="p">],</span>
</span><span class='line'>  <span class="nt">&quot;version&quot;</span><span class="p">:</span> <span class="s2">&quot;0.0.1-77&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;homepage&quot;</span><span class="p">:</span> <span class="s2">&quot;http://mementodb.com&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;author&quot;</span><span class="p">:</span> <span class="s2">&quot;Himanshu Gilani &lt;hgilani@gmail.com&gt; (http://himanshu.gilani.info)&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;private&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;scripts&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;test&quot;</span><span class="p">:</span> <span class="s2">&quot;mocha test/*-test.js&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;start&quot;</span><span class="p">:</span> <span class="s2">&quot;app.js&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nt">&quot;engines&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;node&quot;</span><span class="p">:</span> <span class="s2">&quot;0.6.x&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nt">&quot;dependencies&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;mustache&quot;</span><span class="p">:</span> <span class="s2">&quot;0.4.x&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;request&quot;</span><span class="p">:</span> <span class="s2">&quot;2.9.x&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;express&quot;</span><span class="p">:</span> <span class="s2">&quot;2.5.x&quot;</span><span class="p">,</span>
</span><span class='line'>   <span class="p">},</span>
</span><span class='line'>  <span class="nt">&quot;devDependencies&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;mocha&quot;</span><span class="p">:</span> <span class="s2">&quot;&gt;=1.0.3&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;should&quot;</span><span class="p">:</span> <span class="s2">&quot;&gt;=0.6.3&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;assert&quot;</span><span class="p">:</span> <span class="s2">&quot;0.4.9&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;jake&quot;</span><span class="p">:</span> <span class="s2">&quot;0.2.33&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;uglify-js&quot;</span><span class="p">:</span> <span class="s2">&quot;1.2.6&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;cloudfiles&quot;</span><span class="p">:</span> <span class="s2">&quot;0.3.3&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Armed with this file anybody can get the bigger about the project. In addition to providing bigger it provides a standard way of maintaining node.js packages. Think of this like <strong>Convention over Configuration</strong> as when this file is available it prodvides following useful NPM commands</p>

<ul>
<li>Install all project specific dependencies - <code>npm install</code></li>
<li>Start the application - <code>npm start</code></li>
<li>Execute unit tests - <code>npm test</code></li>
</ul>


<p>Since executing these commands does not require any knowledge about the module. This is for the win.</p>

<p>For a good description of different properties that can be configured in package.json file refer to <a href="http://package.json.nodejitsu.com">package.json cheatsheet</a></p>

<h2>Best practices</h2>

<p>For best practices refer to following 2 blog posts</p>

<ul>
<li><a href="http://blog.nodejitsu.com/package-dependencies-done-right">Package.json dependencies done right</a></li>
<li><a href="http://blog.nodejitsu.com/ten-lessons-learned-maintaining-nodejs-modules">Ten Lessons Learned Maintaining Nodejs Modules</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
